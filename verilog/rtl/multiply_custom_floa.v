// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module multiply_custom_floa (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] a;
input  [15:0] b;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln306_fu_62_p2;
reg   [0:0] icmp_ln306_reg_303;
wire   [0:0] icmp_ln306_1_fu_68_p2;
reg   [0:0] icmp_ln306_1_reg_309;
reg   [4:0] exponent_b_reg_315;
wire   [21:0] mantissa_result_fu_296_p2;
reg   [21:0] mantissa_result_reg_320;
wire   [0:0] tmp_fu_136_p3;
reg   [0:0] tmp_reg_326;
wire   [5:0] add_ln324_fu_151_p2;
reg   [5:0] add_ln324_reg_331;
reg   [0:0] tmp_4_reg_336;
wire   [4:0] exponent_a_fu_74_p4;
wire   [9:0] mantissa_a_fu_88_p1;
wire   [10:0] or_ln_fu_112_p3;
wire   [9:0] mantissa_b_fu_102_p1;
wire   [10:0] or_ln321_1_fu_124_p3;
wire   [5:0] select_ln324_fu_143_p3;
wire   [5:0] zext_ln310_fu_84_p1;
wire   [15:0] xor_ln319_fu_106_p2;
wire    ap_CS_fsm_state2;
wire   [6:0] zext_ln315_fu_169_p1;
wire  signed [6:0] sext_ln324_fu_172_p1;
wire   [6:0] exponent_result_fu_175_p2;
wire   [9:0] tmp_2_fu_206_p4;
wire   [9:0] tmp_3_fu_215_p4;
wire   [4:0] trunc_ln335_fu_202_p1;
wire   [9:0] select_ln324_1_fu_224_p3;
wire   [0:0] or_ln306_fu_165_p2;
wire   [0:0] tmp_1_fu_181_p3;
wire   [0:0] or_ln331_fu_240_p2;
wire   [0:0] icmp_ln332_fu_189_p2;
wire   [0:0] xor_ln331_fu_246_p2;
wire   [0:0] or_ln306_1_fu_258_p2;
wire   [0:0] xor_ln306_fu_262_p2;
wire   [0:0] and_ln331_fu_268_p2;
wire   [0:0] and_ln332_fu_252_p2;
wire   [15:0] select_ln332_fu_195_p3;
wire   [15:0] result_fu_231_p4;
wire   [0:0] or_ln331_1_fu_274_p2;
wire   [15:0] select_ln331_fu_280_p3;
wire   [10:0] mantissa_result_fu_296_p0;
wire   [10:0] mantissa_result_fu_296_p1;
reg   [1:0] ap_NS_fsm;
wire   [21:0] mantissa_result_fu_296_p00;
wire   [21:0] mantissa_result_fu_296_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

forward_pass_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 22 ))
forward_pass_mul_bkb_U1(
    .din0(mantissa_result_fu_296_p0),
    .din1(mantissa_result_fu_296_p1),
    .dout(mantissa_result_fu_296_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln324_reg_331 <= add_ln324_fu_151_p2;
        exponent_b_reg_315 <= {{b[14:10]}};
        icmp_ln306_1_reg_309 <= icmp_ln306_1_fu_68_p2;
        icmp_ln306_reg_303 <= icmp_ln306_fu_62_p2;
        mantissa_result_reg_320 <= mantissa_result_fu_296_p2;
        tmp_4_reg_336 <= xor_ln319_fu_106_p2[32'd15];
        tmp_reg_326 <= mantissa_result_fu_296_p2[32'd21];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln324_fu_151_p2 = (select_ln324_fu_143_p3 + zext_ln310_fu_84_p1);

assign and_ln331_fu_268_p2 = (xor_ln306_fu_262_p2 & tmp_1_fu_181_p3);

assign and_ln332_fu_252_p2 = (xor_ln331_fu_246_p2 & icmp_ln332_fu_189_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = ((or_ln331_1_fu_274_p2[0:0] === 1'b1) ? 16'd0 : select_ln331_fu_280_p3);

assign exponent_a_fu_74_p4 = {{a[14:10]}};

assign exponent_result_fu_175_p2 = ($signed(zext_ln315_fu_169_p1) + $signed(sext_ln324_fu_172_p1));

assign icmp_ln306_1_fu_68_p2 = ((b == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln306_fu_62_p2 = ((a == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln332_fu_189_p2 = (($signed(exponent_result_fu_175_p2) > $signed(7'd30)) ? 1'b1 : 1'b0);

assign mantissa_a_fu_88_p1 = a[9:0];

assign mantissa_b_fu_102_p1 = b[9:0];

assign mantissa_result_fu_296_p0 = mantissa_result_fu_296_p00;

assign mantissa_result_fu_296_p00 = or_ln_fu_112_p3;

assign mantissa_result_fu_296_p1 = mantissa_result_fu_296_p10;

assign mantissa_result_fu_296_p10 = or_ln321_1_fu_124_p3;

assign or_ln306_1_fu_258_p2 = (icmp_ln306_reg_303 | icmp_ln306_1_reg_309);

assign or_ln306_fu_165_p2 = (icmp_ln306_reg_303 | icmp_ln306_1_reg_309);

assign or_ln321_1_fu_124_p3 = {{1'd1}, {mantissa_b_fu_102_p1}};

assign or_ln331_1_fu_274_p2 = (or_ln306_fu_165_p2 | and_ln331_fu_268_p2);

assign or_ln331_fu_240_p2 = (tmp_1_fu_181_p3 | or_ln306_fu_165_p2);

assign or_ln_fu_112_p3 = {{1'd1}, {mantissa_a_fu_88_p1}};

assign result_fu_231_p4 = {{{tmp_4_reg_336}, {trunc_ln335_fu_202_p1}}, {select_ln324_1_fu_224_p3}};

assign select_ln324_1_fu_224_p3 = ((tmp_reg_326[0:0] === 1'b1) ? tmp_2_fu_206_p4 : tmp_3_fu_215_p4);

assign select_ln324_fu_143_p3 = ((tmp_fu_136_p3[0:0] === 1'b1) ? 6'd50 : 6'd49);

assign select_ln331_fu_280_p3 = ((and_ln332_fu_252_p2[0:0] === 1'b1) ? select_ln332_fu_195_p3 : result_fu_231_p4);

assign select_ln332_fu_195_p3 = ((tmp_4_reg_336[0:0] === 1'b1) ? 16'd32768 : 16'd32767);

assign sext_ln324_fu_172_p1 = $signed(add_ln324_reg_331);

assign tmp_1_fu_181_p3 = exponent_result_fu_175_p2[32'd6];

assign tmp_2_fu_206_p4 = {{mantissa_result_reg_320[20:11]}};

assign tmp_3_fu_215_p4 = {{mantissa_result_reg_320[19:10]}};

assign tmp_fu_136_p3 = mantissa_result_fu_296_p2[32'd21];

assign trunc_ln335_fu_202_p1 = exponent_result_fu_175_p2[4:0];

assign xor_ln306_fu_262_p2 = (or_ln306_1_fu_258_p2 ^ 1'd1);

assign xor_ln319_fu_106_p2 = (b ^ a);

assign xor_ln331_fu_246_p2 = (or_ln331_fu_240_p2 ^ 1'd1);

assign zext_ln310_fu_84_p1 = exponent_a_fu_74_p4;

assign zext_ln315_fu_169_p1 = exponent_b_reg_315;

endmodule //multiply_custom_floa
